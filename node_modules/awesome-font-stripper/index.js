// Generated by LiveScript 1.3.1
/*
  Copyright (c) 2015 Christian Ferraz Lemos de Sousa

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
(function(){
  var Stream, through, cheerio, async, svgHeader, xmlns, xlink, faWidth, faHeigth, isArray, keysOf, concatStream, mergeStream, xmlStream, uniqueId, parseOptions, xmlHeaderWrapper, buildGlyphs, buildMerges;
  Stream = require('stream');
  through = require('through');
  cheerio = require('cheerio');
  async = require('async');
  svgHeader = '<?xml version="1.0" encoding="utf-8"?>';
  xmlns = 'http://www.w3.org/2000/svg';
  xlink = 'http://www.w3.org/1999/xlink';
  faWidth = 1792;
  faHeigth = faWidth + 378;
  isArray = Array.isArray;
  keysOf = Object.keys;
  concatStream = function(){
    return through(function(it){
      return this.queue(it);
    }, function(){
      return this.emit('end');
    });
  };
  mergeStream = function(callback){
    var buffer;
    buffer = '';
    return through(function(it){
      return buffer += it;
    }, function(){
      return callback.call(this, buffer);
    });
  };
  xmlStream = function(tag, attributes){
    var autoClose, formTag, stream;
    attributes == null && (attributes = {});
    autoClose = attributes.__autoclose__ || false;
    formTag = function(stream, push, callback){
      push.call(stream, "<" + tag);
      return async.each(keysOf(attributes), function(key, callback){
        if (key !== '__autoclose__') {
          push.call(stream, " " + key + "=\"" + attributes[key] + "\"");
        }
        return callback();
      }, function(){
        if (autoClose) {
          push.call(stream, '/>');
        } else {
          push.call(stream, '>');
        }
        return callback();
      });
    };
    if (autoClose) {
      stream = new Stream.Readable();
      formTag(stream, stream.push, function(){
        return stream.push(null);
      });
      return stream;
    } else {
      stream = through(function(data){
        var this$ = this;
        if (this.needsWrapping) {
          formTag(this, this.queue, function(){
            return this$.queue(data);
          });
          return this.needsWrapping = false;
        }
        return this.queue(data);
      }, function(){
        this.queue("</" + tag + ">");
        return this.emit('end');
      });
      stream.needsWrapping = true;
      return stream;
    }
  };
  uniqueId = function(options){
    var prefix, index;
    options == null && (options = {});
    prefix = options.prefix || 'iCoN_';
    index = options.init || 0;
    return function(){
      index += 1;
      return prefix + "" + index;
    };
  };
  parseOptions = function(options, callback){
    var uidGen, glyphNames, findPartialGlyphs, findPartialMerges;
    uidGen = uniqueId();
    glyphNames = keysOf(options);
    findPartialGlyphs = function(callback){
      var obj;
      obj = {
        icons: {},
        alias: {},
        regis: {}
      };
      return async.filter(glyphNames, function(name, callback){
        return callback(typeof options[name] === 'string');
      }, function(it){
        return async.each(it, function(name, callback){
          var ref, id;
          ref = options[name];
          switch (false) {
          case ref.length !== 1:
            id = uidGen();
            obj.icons[id] = ref;
            obj.alias[name] = [id];
            obj.regis[name] = id;
            obj.regis[ref] = id;
            return callback();
          case obj.regis[ref] == null:
            obj.alias[name] = [obj.regis[ref]];
            return callback();
          default:
            return callback(new Error("Invalid Configuration: icon " + ref + " not found."));
          }
        }, function(err){
          return callback(err, obj);
        });
      });
    };
    findPartialMerges = function(callback){
      return async.filter(glyphNames, function(name, callback){
        return callback(isArray(options[name]));
      }, function(it){
        return callback(it);
      });
    };
    return findPartialGlyphs(function(err, partialGlyphs){
      if (err) {
        callback(err);
      }
      return findPartialMerges(function(partialMerges){
        var rules;
        rules = {
          glyphs: partialGlyphs.icons,
          merges: partialGlyphs.alias
        };
        return async.each(partialMerges, function(name, callback){
          return async.map(options[name], function(value, callback){
            var id;
            if (partialGlyphs.regis[value] != null) {
              return callback(null, partialGlyphs.regis[value]);
            } else if (value.length === 1) {
              id = uidGen();
              partialGlyphs.icons[id] = value;
              partialGlyphs.regis[name] = id;
              return callback(null, id);
            } else {
              return callback(new Error("Invalid Configuration: icon " + value + " not found."));
            }
          }, function(err, result){
            rules.merges[name] = result;
            return callback();
          });
        }, function(err){
          return callback(err, rules);
        });
      });
    });
  };
  xmlHeaderWrapper = function(){
    var stream;
    stream = through(function(it){
      if (this.needsWrapping) {
        this.queue(svgHeader);
        this.needsWrapping = false;
      }
      return this.queue(it);
    }, function(){
      return this.emit('end');
    });
    stream.needsWrapping = true;
    return stream;
  };
  buildGlyphs = function($, rules){
    var resultStream;
    resultStream = concatStream();
    async.eachSeries(keysOf(rules), function(name, callback){
      var character, glyph, container, path;
      character = rules[name];
      glyph = $("glyph[unicode=\"" + character + "\"]");
      container = xmlStream('svg', {
        id: name,
        viewBox: "0 0 " + faWidth + " " + faHeigth
      });
      path = xmlStream('path', {
        d: glyph.attr('d'),
        transform: "scale(1,-1) translate(0, -" + faWidth + ")",
        __autoclose__: true
      });
      return path.pipe(container).on('end', function(){
        return callback();
      }).pipe(resultStream, {
        end: false
      });
    }, function(){
      return resultStream.end();
    });
    return resultStream;
  };
  buildMerges = function($, rules){
    var resultStream;
    resultStream = concatStream();
    async.eachSeries(keysOf(rules), function(name, callback){
      var container;
      container = xmlStream('svg', {
        id: name,
        viewBox: "0 0 " + faWidth + " " + faHeigth
      });
      container.on('end', function(){
        return callback();
      }).pipe(resultStream, {
        end: false
      });
      return async.eachSeries(rules[name], function(char, callback){
        var use;
        use = xmlStream('use', {
          'xlink:href': "#" + char,
          __autoclose__: true
        });
        return use.on('end', function(){
          return callback();
        }).pipe(container, {
          end: false
        });
      }, function(){
        return container.end();
      });
    }, function(){
      return resultStream.end();
    });
    return resultStream;
  };
  module.exports = function(options){
    options == null && (options = {});
    return mergeStream(function(fontAwesome){
      var this$ = this;
      return parseOptions(options, function(err, rules){
        var $, resultStream, svgWrapper;
        if (err) {
          throw err;
        }
        $ = cheerio.load(fontAwesome, {
          xmlMode: true
        });
        resultStream = xmlHeaderWrapper();
        svgWrapper = xmlStream('svg', {
          'xmlns': xmlns,
          'xmlns:xlink': xlink
        });
        buildGlyphs($, rules.glyphs).on('data', function(it){
          return svgWrapper.write(it);
        }).on('end', function(){
          return buildMerges($, rules.merges).on('data', function(it){
            return svgWrapper.write(it);
          }).on('end', function(){
            return svgWrapper.end();
          });
        });
        return svgWrapper.pipe(resultStream).on('data', function(it){
          return this$.queue(it);
        }).on('end', function(){
          return this$.emit('end');
        });
      });
    });
  };
}).call(this);
